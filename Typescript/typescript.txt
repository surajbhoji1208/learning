

üöÄ 1Ô∏è‚É£ Basics & Fundamentals
What is TypeScript? Why use it over JavaScript?
ANS:    TypeScript is an open-source programming language developed and maintained by Microsoft.
        It‚Äôs a superset of JavaScript, which means any valid JavaScript code is also valid TypeScript code.
        TypeScript adds static typing and advanced type-checking features to JavaScript.
        It needs to be transpiled (compiled) to plain JavaScript because browsers don‚Äôt understand TypeScript natively.

What are the main benefits of TypeScript?
ANS:    Catches errors early with static typing.
        Better IDE support (autocomplete, hints).
        Easier to scale large projects.
        Uses modern JS features safely.
        Can be adopted gradually with existing JS.

How does TypeScript transpile to JavaScript?
ANS:    TypeScript uses its compiler (tsc) to check types and then transforms (transpiles) the .ts files into plain JavaScript files (.js) that browsers and Node.js can run.
        The compiler removes all type annotations because JavaScript doesn‚Äôt understand types, and outputs clean JS code based on your tsconfig.json settings (like ES5, ES6).

What are .ts and .d.ts files?
ANS:    .ts is Regular TypeScript source files.
        They contain your actual TypeScript code ‚Äî classes, interfaces, functions, types, etc.
        .d.ts is Type declaration files 
        They only contain type information (no runtime code). They describe the shape of existing JavaScript code or libraries so TypeScript knows about the types.

How do you run a TypeScript project?

üöÄ 2Ô∏è‚É£ Types & Type System
What is static typing?
ANS:   Static typing is a programming language feature where the type of a variable is known and checked at compile time, before the code runs.


What is any type? When would you use it?
ANS: The any type is a special type in TypeScript that turns off type checking for that value.

What is unknown? How is it different from any?
ANS:  This value could be anything, but I don‚Äôt trust it yet ‚Äî you must check its type before you use it.‚Äù
      You can assign anything to an unknown variable.
      But you can‚Äôt use it directly without type-checking or type assertions.

What is void?
ANS:  void is a TypeScript keyword and return type that means ‚Äúthis function does not return any useful value.‚Äù

What is never? When does a function return never?
ANS:    This function can‚Äôt finish normally.
        never is a special type that means ‚Äúthis value should never happen.‚Äù
        A function that returns never never actually returns ‚Äî it either throws an error or loops forever.



What is type assertion (aka casting)? Syntax for it?
ANS:    It does not change the runtime value ‚Äî it only tells the compiler to treat a value as a more specific type.


üöÄ 3Ô∏è‚É£ Functions, Interfaces & Classes
How do you define a function with typed parameters and return type?
ANS: function add(a: number, b: number): number {
        return a + b;
        }

What are optional parameters?
ANS: Optional parameters mean you don‚Äôt have to provide a value for that parameter when calling the function.
        function greet(name?: string) {
         console.log(`Hello, ${name}`);
        }

What is a default parameter?
ANS: A default parameter means if you don‚Äôt provide a value, the function uses the default value you defined.
                function greet(name: string = "Guest") {
                console.log(`Hello, ${name}`);
                }

What is the difference between interface and type?
ANS:  Both interface and type can describe the shape of an object
                                        // Using interface
                                interface User {
                                        name: string;
                                        age: number;
                                        }

                                        // Using type
                                type User = {
                                        name: string;
                                        age: number;
                                        };
        interface is extendable:
                You can extend an interface.
                You can declare the same interface multiple times ‚Äî TS merges them!
        type is not mergeable:
                type aliases are single declarations. You can‚Äôt declare the same type twice.
                But you can compose types using & (intersection).


How do you extend interfaces?
                interface Person {
                        name: string;
                        age: number;
                        }

                interface Employee extends Person {
                        employeeId: number;
                        }

                const emp: Employee = {
                        name: "Alice",
                        age: 30,
                        employeeId: 123
                        };


How do you merge interfaces?
        interface User {
                name: string;
                }

        interface User {
                age: number;
                }

        const user: User = {
                name: "Bob",
                age: 42
                };


What is readonly property?
ANS: This property can be set once (when the object is created) but cannot be reassigned later.

How do you implement a class with an interface?
ANS:  -Class get extends and interface get implement
      -interface get extends with interface  

                interface Animal {
                        name: string;
                        makeSound(): void;
                        }

                class Dog implements Animal {
                        name: string;

                        constructor(name: string) {
                        this.name = name;
                        }

                makeSound() {
                         console.log("Woof!");
                        }
                        }


How does public, private, protected work in TS classes?
ANS:    public ‚Äî accessible anywhere.
        private ‚Äî accessible only inside the same class.
        protected ‚Äî accessible inside the same class and subclasses.

What is abstract class?

What are accessors (get / set)?

How do you create static properties/methods in TS?
ANS:    You access it on the class, not on an object created from the class.
        It‚Äôs shared by all instances ‚Äî there‚Äôs only one copy.

