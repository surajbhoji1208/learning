âœ… 1. Angular Basics (10 questions)
What is Angular and how is it different from AngularJS?

What are components in Angular?

What is the role of NgModule in Angular?
=>NgModule plays a central role in organizing an application into cohesive blocks of functionality. 
  It's a decorator that defines a module, which is a container for a group of related components, directives, pipes, and services.

What is the Angular lifecycle hook? Name a few important ones.
  -In Angular, lifecycle hooks are special methods that allow you to tap into key moments in a component's or directiveâ€™s lifecycle 
   Most Commonly Used Hooks
    ngOnInit() â€” for initialization logic.
    ngOnDestroy() â€” for teardown/cleanup.
    ngOnChanges() â€” for responding to input changes.
    ngAfterViewInit() â€” for DOM-dependent logic after view init.

How do you bootstrap an Angular application?
  =>Bootstrapping an Angular application means initializing and loading the root module and component into the browser
    1. Main Entry Point â€“ main.ts
      This is the starting point of any Angular app.

What is the difference between @Component, @NgModule, and @Injectable?
=>In Angular, these are decorators used to define the role of a class:
    @Component:
      Marks a class as an Angular component.
      Controls a piece of UI using a selector, template, and styles.
      Example: @Component({ selector: 'app-home', templateUrl: 'home.html' })
    @NgModule:
      Declares an Angular module that groups components, directives, and services.
      Handles app structure and configuration.
      Defines what gets bootstrapped, imported, and exported.
      Example: @NgModule({ declarations: [...], imports: [...] })
    @Injectable:
      Marks a class as injectable, typically for services.
      Allows Angular's dependency injection system to provide it.
      Example: @Injectable({ providedIn: 'root' })

What is the difference between BrowserModule and CommonModule?
=>-BrowserModule is used only in the root module (typically AppModule) and is required to run the Angular app in the browser. It provides services   
   essential for rendering and bootstrapping, and it also re-exports CommonModule.
  -On the other hand, CommonModule is used in feature modules or lazy-loaded modules. It provides common directives like ngIf, ngFor, and ngSwitch, 
   which are not available by default in those modules.

What is a template in Angular?
=>In Angular, a template is the HTML that defines the view of a component. It contains the layout and markup, along with Angular-specific syntax 
  like directives, bindings, and pipes to control how data is displayed and interacted with in the UI.

How do you use property binding and event binding in Angular?
=>property binding is used to bind data from the component to the view, and event binding is used to respond to user actions in the view.
  -Property Binding ([property]="expression"):<img [src]="imageUrl">
  -Event Binding ((event)="handler()"):<button (click)="onClick()">Click Me</button>

What are pipes in Angular? How do you create a custom pipe?
=> a pipe is a way to transform data before displaying it in the template. Pipes are used with the | symbol and are useful for things like 
   formatting dates, numbers, strings, etc.
    @Pipe({ name: 'capitalize' })
    export class CapitalizePipe implements PipeTransform {
      transform(value: string): string {
        if (!value) return '';
        return value[0].toUpperCase() + value.slice(1).toLowerCase();
      }
    }


âœ… 2. Components and Templates (10 questions)
How do you create a component using Angular CLI?
=>ng g c name

What are the different ways to pass data to a component?
                  =>ðŸ”¹ 1. @Input() â€” Parent to Child Component
                          Used to pass data from a parent component to a child using property binding.
                          
                          Parent Template:
                          <app-child [message]="parentMessage"></app-child>
                          @Input() message: string;
                   ðŸ”¹ 2. @Output() â€” Child to Parent Communication
                          Used to send data from child to parent via EventEmitter.
                          
                          Child Component:
                          @Output() notify = new EventEmitter<string>();
                          
                          someMethod() {
                            this.notify.emit('Data from child');
                          }
                          Parent Template:
                  <app-child (notify)="handleNotify($event)"></app-child>
                  ðŸ”¹ 3. Service with Observable/Subject
                          Used to share data between unrelated components (e.g., siblings or across the app) via a shared service.
                          
                          @Injectable({ providedIn: 'root' })
                          export class DataService {
                            private data = new BehaviorSubject<string>('initial');
                            currentData = this.data.asObservable();
                          
                            updateData(newValue: string) {
                              this.data.next(newValue);
                            }
                          }
                          Components can subscribe to currentData and get updates.
                          
                  ðŸ”¹ 4. Router Parameters / Query Params
                              Data passed through Angular routing.
                              
                              // Route config
                              { path: 'user/:id', component: UserComponent }
                              
                              // Accessing in component
                              this.route.snapshot.params['id'];
                  ðŸ”¹ 5. Template Reference Variables
                            Passing a DOM element or component reference using #ref.
                            
                            <input #myInput>
                            <app-child [inputElement]="myInput"></app-child>

What is @Input() and @Output() in Angular?

How do you use ng-content and content projection?
=>which means inserting content from a parent component into a child component's template
        Parent Component:
          <app-card>
            <p>This is projected content!</p>
          </app-card>
        Child Component (app-card):
          <div class="card">
            <ng-content></ng-content>
          </div>

What is a smart (container) vs dumb (presentational) component?
=>ðŸ”¹ Smart (Container) Component:
      Handles business logic, data fetching, and state management
      Knows how to get the data
      Passes data to child (dumb) components via @Input()
      Handles events from child components via @Output()
      Typically connected to services, API calls, or the store
  ðŸ”¹ Dumb (Presentational) Component:
      Only responsible for displaying data (UI)
      Gets data via @Input() and emits events via @Output()
      Doesnâ€™t know where the data comes from
      Easier to test and reuse


What is ViewChild() and ContentChild()? When would you use each?

What is the difference between template reference variable and ViewChild()?

How does the component lifecycle work? Explain ngOnInit, ngOnChanges, ngOnDestroy.

How can you create a dynamic component?

How to style components in Angular (inline, global, scoped styles)?

âœ… 3. Directives (8 questions)
What are directives in Angular?
=> directives are special classes that add behavior or modify the structure of elements in the DOM. They are used to extend HTML with custom logic.

          ðŸ”¹ Types of Directives:
          Component
          Technically a directive with a template.
          Example: @Component({...})
          
          Structural Directives
          Change the layout of the DOM by adding or removing elements.
          Prefix: usually *
          Examples: *ngIf, *ngFor, *ngSwitch
          
          Attribute Directives
          Change the appearance or behavior of an existing element.
          Applied like regular attributes.
          Example: ngClass, ngStyle, or custom directives

Difference between structural and attribute directives?

Explain the usage of *ngIf, *ngFor, and *ngSwitch.

How do you create a custom directive?
=>ng generate directive highlight

âœ… 4. Forms (8 questions)
What is the difference between reactive and template-driven forms?

How do you create and validate reactive forms?

How to implement custom validators in Angular?

What is FormGroup, FormControl, and FormArray?

How to handle nested forms in Angular?

How do you reset or patch values in a reactive form?

How to dynamically add/remove form fields?

How to show form validation errors dynamically?

âœ… 5. Services and Dependency Injection (8 questions)
What is a service in Angular?

What is dependency injection in Angular?

How do you provide a service in a specific module or component?

What is the use of providedIn: 'root'?

How do you share data between components using a service?

How does hierarchical injection work in Angular?

How to make a singleton service?

What are multi providers in Angular?

âœ… 6. Routing and Navigation (10 questions)
How do you configure routes in Angular?

What is the difference between RouterModule.forRoot() and RouterModule.forChild()?

How do you navigate between routes programmatically?

What are route guards? Explain CanActivate, CanDeactivate, etc.

How do you pass route parameters and query parameters?

What is lazy loading and how do you implement it?

What is route resolver and how is it useful?

How can you add a 404 page in Angular?

How do child routes and nested routes work?

How do you enable route reuse in Angular?

âœ… 7. Observables & RxJS (10 questions)
What is an observable and how does it differ from a promise?

How do you subscribe to an observable in Angular?

What are common RxJS operators you've used? (map, switchMap, etc.)

Difference between switchMap, mergeMap, and concatMap?

How do you cancel a subscription in Angular?

What is the async pipe and how does it work?

How do you create a custom observable?

What is Subject and BehaviorSubject?

How do you handle multiple observables together using forkJoin, combineLatest, or zip?

How do you debounce input using RxJS?

âœ… 8. HTTP Client and API Integration (7 questions)
How do you make an HTTP request in Angular?

What is HttpClientModule and how do you import it?

How do you handle error responses in HTTP calls?

What is an HTTP interceptor and how do you create one?

How do you send headers, query params, and body in HTTP requests?

How to handle retrying failed requests?

How do you mock HTTP calls in unit tests?

âœ… 9. Unit Testing (7 questions)
What tools are used for testing in Angular?

How do you test a component with dependencies?

How do you test a service with HttpClient?

What is TestBed in Angular testing?

How do you mock a service in a test?

How do you test form validations?

How do you test route navigation in a component?

âœ… 10. Performance Optimization (6 questions)
What is ChangeDetectionStrategy.OnPush and how does it work?

How does Angular's change detection mechanism work?

How do you optimize large lists in Angular?

How to reduce initial bundle size?

What are best practices to improve Angular performance?

How does lazy loading help performance?

âœ… 11. Angular CLI and Build Process (6 questions)
What is Angular CLI and what are some useful commands?

What is the difference between ng build and ng serve?

What is Ahead-of-Time (AOT) compilation?

How do you build Angular app for production?

How do you add and configure environments in Angular?

How to customize Webpack in Angular (if needed)?

âœ… 12. Miscellaneous / Real-world (10 questions)
How do you secure an Angular app (e.g., JWT, AuthGuard)?

How do you handle role-based access in Angular?

How do you implement internationalization (i18n)?

How do you use Angular Material or Bootstrap in Angular?

Have you worked with any state management library like NgRx, Akita?

How do you structure your Angular application folder-wise?

How do you share common modules and components?

How would you handle file upload in Angular?

How do you deploy an Angular app to production?

What challenges have you faced in Angular projects and how did you overcome them?

